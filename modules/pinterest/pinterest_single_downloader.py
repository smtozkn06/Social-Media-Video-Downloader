import flet as ft
import os
import sys
import threading
import time
import re
import subprocess
import random
import json
from datetime import datetime
from urllib.parse import urlparse

# Ana dizini sys.path'e ekle
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from video_processor import VideoProcessor
from modules.pinterest.pinterest_request_downloader import PinterestRequestDownloader

class PinterestSingleDownloaderApp:
    def __init__(self):
        self.video_processor = VideoProcessor(log_callback=self.update_log)
        self.pinterest_downloader = PinterestRequestDownloader(log_callback=self.update_log)
        self.is_downloading = False
        self.page = None
        self.back_callback = None
        
    def main(self, page: ft.Page):
        page.clean()  # Sayfayƒ± temizle
        page.title = "Pinterest Tekli Pin ƒ∞ndirici"
        page.theme_mode = ft.ThemeMode.LIGHT
        page.window_width = 800
        page.window_height = 900
        page.window_resizable = True
        page.scroll = ft.ScrollMode.AUTO
        page.padding = 20
        
        self.page = page
        
        # UI Bile≈üenleri
        self.pin_url_field = ft.TextField(
            label="Pinterest Pin URL'si",
            hint_text="√ñrnek: https://www.pinterest.com/pin/123456789/ veya https://pin.it/abc123",
            width=600,
            prefix_icon=ft.Icons.LINK,
            on_change=self.on_url_change,
            helper_text="Pinterest pin URL'sini buraya yapƒ±≈ütƒ±rƒ±n"
        )
        
        self.use_logo_checkbox = ft.Checkbox(
            label="Logo Ekle",
            value=False,
            on_change=self.on_logo_checkbox_change
        )
        
        self.logo_file_field = ft.TextField(
            label="Logo Dosyasƒ± (.png)",
            width=400,
            read_only=True,
            visible=False
        )
        
        self.output_folder_field = ft.TextField(
            label="√áƒ±ktƒ± Klas√∂r√º",
            value="output",
            width=400,
            read_only=True
        )
        
        # Dosya se√ßici butonlarƒ±
        logo_file_picker = ft.FilePicker(
            on_result=self.on_logo_file_selected
        )
        
        output_folder_picker = ft.FilePicker(
            on_result=self.on_output_folder_selected
        )
        
        page.overlay.extend([logo_file_picker, output_folder_picker])
        
        # Logo butonunu sƒ±nƒ±f deƒüi≈ükeni olarak sakla
        self.logo_button = ft.ElevatedButton(
            "Se√ß",
            icon=ft.Icons.IMAGE,
            on_click=lambda _: logo_file_picker.pick_files(
                allowed_extensions=["png"]
            ),
            visible=False
        )
        
        # Progress bar ve status
        self.progress_bar = ft.ProgressBar(width=600, visible=False)
        self.status_text = ft.Text("üü¢ Hazƒ±r - Pinterest pin indirmeye hazƒ±r", size=16, color=ft.Colors.GREEN)
        self.log_text = ft.Text("", size=11, color=ft.Colors.BLACK, selectable=True)
        
        # ƒ∞lk log mesajƒ±
        self.update_log("üéØ Pinterest Tekli Pin ƒ∞ndirici ba≈ülatƒ±ldƒ±")
        self.update_log("üí° Bir Pinterest pin URL'si girin ve indirmeyi ba≈ülatƒ±n")
        
        # Butonlar
        start_button = ft.ElevatedButton(
            text="ƒ∞ndirmeyi Ba≈ülat",
            icon=ft.Icons.DOWNLOAD,
            on_click=self.start_download,
            width=200,
            height=50,
            style=ft.ButtonStyle(
                color=ft.Colors.WHITE,
                bgcolor=ft.Colors.GREEN_600
            )
        )
        
        stop_button = ft.ElevatedButton(
            text="Durdur",
            icon=ft.Icons.STOP,
            on_click=self.stop_download,
            width=200,
            height=50,
            style=ft.ButtonStyle(
                color=ft.Colors.WHITE,
                bgcolor=ft.Colors.RED_600
            )
        )
        

        
        # Layout
        content = ft.Column([
            ft.Text("Pinterest Tekli Pin ƒ∞ndirici", 
                   size=24, weight=ft.FontWeight.BOLD, 
                   color=ft.Colors.RED_600),
            ft.Divider(),
            
            # Pin URL Giri≈üi
            ft.Text("Pin URL Giri≈üi", size=18, weight=ft.FontWeight.BOLD),
            ft.Row([
                self.pin_url_field
            ], alignment=ft.MainAxisAlignment.CENTER),
            
            ft.Divider(),
            
            # Dosya ayarlarƒ±
            ft.Text("Dosya Ayarlarƒ±", size=18, weight=ft.FontWeight.BOLD),
            
            ft.Row([
                self.use_logo_checkbox,
            ]),
            
            ft.Row([
                self.logo_file_field,
                self.logo_button
            ]),
            
            ft.Row([
                self.output_folder_field,
                ft.ElevatedButton(
                    "Se√ß",
                    icon=ft.Icons.FOLDER_OPEN,
                    on_click=lambda _: output_folder_picker.get_directory_path()
                )
            ]),
            
            ft.Divider(),
            
            # Kontrol butonlarƒ±
            ft.Row([
                start_button,
                stop_button
            ], alignment=ft.MainAxisAlignment.CENTER),
            

            
            ft.Divider(),
            
            # Progress ve status
            self.status_text,
            self.progress_bar,
            
            ft.Container(
                content=ft.Column([
                    ft.Row([
                        ft.Text("Log:", size=14, weight=ft.FontWeight.BOLD),
                        ft.Row([
                            ft.ElevatedButton(
                                "Loglarƒ± Kopyala",
                                icon=ft.Icons.COPY,
                                on_click=self.copy_logs,
                                height=30,
                                style=ft.ButtonStyle(
                                    color=ft.Colors.WHITE,
                                    bgcolor=ft.Colors.BLUE_600
                                )
                            ),
                            ft.ElevatedButton(
                                "Loglarƒ± Temizle",
                                icon=ft.Icons.CLEAR,
                                on_click=self.clear_logs,
                                height=30,
                                style=ft.ButtonStyle(
                                    color=ft.Colors.WHITE,
                                    bgcolor=ft.Colors.ORANGE_600
                                )
                            )
                        ], spacing=10)
                    ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN),
                    ft.Container(
                        content=self.log_text,
                        bgcolor=ft.Colors.GREY_100,
                        padding=10,
                        border_radius=5,
                        width=600,
                        height=200,
                        border=ft.border.all(1, ft.Colors.GREY_300)
                    )
                ]),
                margin=ft.margin.only(top=20)
            )
        ], 
        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
        scroll=ft.ScrollMode.AUTO)
        
        page.add(content)
        page.update()
    
    def on_url_change(self, e):
        """URL field deƒüi≈ütiƒüinde ger√ßek zamanlƒ± validation"""
        url = e.control.value.strip()
        if url:
            if 'pinterest.com' in url or 'pin.it' in url:
                e.control.error_text = None
                e.control.border_color = ft.Colors.GREEN
            else:
                e.control.error_text = "Ge√ßersiz Pinterest URL"
                e.control.border_color = ft.Colors.RED
        else:
            e.control.error_text = None
            e.control.border_color = None
        self.page.update()
    
    def on_logo_checkbox_change(self, e):
        """Logo checkbox deƒüi≈ütiƒüinde"""
        self.logo_file_field.visible = e.control.value
        self.logo_button.visible = e.control.value
        self.page.update()
    
    def on_logo_file_selected(self, e: ft.FilePickerResultEvent):
        """Logo dosyasƒ± se√ßildiƒüinde"""
        if e.files:
            self.logo_file_field.value = e.files[0].path
            self.page.update()
    
    def on_output_folder_selected(self, e: ft.FilePickerResultEvent):
        """√áƒ±ktƒ± klas√∂r√º se√ßildiƒüinde"""
        if e.path:
            self.output_folder_field.value = e.path
            self.page.update()
    
    def update_log(self, message):
        """Log mesajƒ±nƒ± g√ºncelle"""
        if hasattr(self, 'log_text') and self.log_text:
            current_time = datetime.now().strftime("%H:%M:%S")
            self.log_text.value += f"[{current_time}] {message}\n"
            if self.page:
                self.page.update()
    
    def copy_logs(self, e):
        """Loglarƒ± panoya kopyala"""
        if self.log_text.value:
            self.page.set_clipboard(self.log_text.value)
            self.update_log("üìã Loglar panoya kopyalandƒ±")
    
    def clear_logs(self, e):
        """Loglarƒ± temizle"""
        self.log_text.value = ""
        self.page.update()
    
    def start_download(self, e):
        """ƒ∞ndirmeyi ba≈ülat"""
        if self.is_downloading:
            self.update_log("‚ö†Ô∏è Zaten bir indirme i≈ülemi devam ediyor")
            return
        
        # URL kontrol√º
        pin_url = self.pin_url_field.value.strip()
        if not pin_url:
            self.update_log("‚ùå L√ºtfen Pinterest pin URL'si girin")
            self.update_log("üí° √ñrnek: https://www.pinterest.com/pin/123456789/")
            return
        
        # Pinterest URL kontrol√º
        if not ('pinterest.com' in pin_url or 'pin.it' in pin_url):
            self.update_log("‚ùå Ge√ßersiz Pinterest URL")
            self.update_log("üí° Desteklenen formatlar:")
            self.update_log("   ‚Ä¢ https://www.pinterest.com/pin/123456789/")
            self.update_log("   ‚Ä¢ https://pin.it/abc123")
            return
        
        # √áƒ±ktƒ± klas√∂r√º kontrol√º
        output_dir = self.output_folder_field.value or "output"
        try:
            os.makedirs(output_dir, exist_ok=True)
            self.update_log(f"üìÅ √áƒ±ktƒ± klas√∂r√º hazƒ±rlandƒ±: {output_dir}")
        except Exception as e:
            self.update_log(f"‚ùå √áƒ±ktƒ± klas√∂r√º olu≈üturulamadƒ±: {str(e)}")
            return
        
        # Logo dosyasƒ± kontrol√º (eƒüer se√ßilmi≈üse)
        if self.use_logo_checkbox.value:
            logo_path = self.logo_file_field.value
            if not logo_path or not os.path.exists(logo_path):
                self.update_log("‚ùå Logo dosyasƒ± se√ßilmedi veya bulunamadƒ±")
                self.update_log("üí° Logo eklemek istemiyorsanƒ±z 'Logo Ekle' se√ßeneƒüini kapatƒ±n")
                return
            else:
                self.update_log(f"üé® Logo dosyasƒ±: {os.path.basename(logo_path)}")
        
        # ƒ∞ndirme ba≈ülat
        self.is_downloading = True
        self.progress_bar.visible = True
        self.status_text.value = "ƒ∞ndirme ba≈ülatƒ±lƒ±yor..."
        self.status_text.color = ft.Colors.ORANGE
        self.page.update()
        
        self.update_log("üöÄ ƒ∞ndirme i≈ülemi ba≈ülatƒ±lƒ±yor...")
        self.update_log("="*50)
        
        # Thread'de indirme i≈ülemini ba≈ülat
        download_thread = threading.Thread(target=self.download_pin, args=(pin_url,))
        download_thread.daemon = True
        download_thread.start()
    
    def download_pin(self, pin_url):
        """Pin'i indir"""
        try:
            # Aray√ºzden √ßƒ±ktƒ± klas√∂r√ºn√º al
            output_dir = self.output_folder_field.value or "output"
            
            self.update_log(f"üéØ ƒ∞ndirme ba≈ülatƒ±lƒ±yor...")
            self.update_log(f"üìå Pin URL: {pin_url}")
            self.update_log(f"üìÅ √áƒ±ktƒ± klas√∂r√º: {output_dir}")
            
            # Pinterest request downloader ile pin'i indir
            # use_logo parametresi pinterest_request_downloader.py'de kullanƒ±lmƒ±yor
            # Logo ekleme i≈ülemi ayrƒ± olarak yapƒ±lacak
            downloaded_files = self.pinterest_downloader.download_pin(
                pin_url, 
                output_dir
            )
            
            if downloaded_files:
                self.update_log(f"üì• {len(downloaded_files)} dosya ba≈üarƒ±yla indirildi")
                
                # Logo ekleme (video ve resim dosyalarƒ± i√ßin ve checkbox i≈üaretliyse)
                if self.use_logo_checkbox.value and self.logo_file_field.value:
                    logo_path = self.logo_file_field.value
                    if os.path.exists(logo_path):
                        self.update_log(f"üé® Logo ekleme i≈ülemi ba≈ülatƒ±lƒ±yor...")
                        processed_count = 0
                        video_count = 0
                        image_count = 0
                        
                        for file_path in downloaded_files:
                            try:
                                # Video dosyalarƒ± i√ßin logo ekleme
                                if file_path.endswith(('.mp4', '.avi', '.mov', '.webm', '.mkv')):
                                    video_count += 1
                                    processed_count += 1
                                    self.update_log(f"üé¨ Video'ya logo ekleniyor: {os.path.basename(file_path)}")
                                    
                                    # Orijinal dosyayƒ± yedekle
                                    original_path = file_path
                                    temp_path = file_path + ".temp"
                                    
                                    # Logo ekle
                                    result_path = self.video_processor.add_logo_to_video(file_path, logo_path, output_dir)
                                    
                                    if result_path and os.path.exists(result_path):
                                        # Orijinal dosyayƒ± sil ve i≈ülenmi≈ü dosyayƒ± yeniden adlandƒ±r
                                        os.remove(file_path)
                                        os.rename(result_path, file_path)
                                        self.update_log(f"‚úÖ Video'ya logo ba≈üarƒ±yla eklendi: {os.path.basename(file_path)}")
                                    else:
                                        self.update_log(f"‚ùå Video logo ekleme ba≈üarƒ±sƒ±z: {os.path.basename(file_path)}")
                                
                                # Resim dosyalarƒ± i√ßin logo ekleme
                                elif file_path.endswith(('.jpg', '.jpeg', '.png', '.bmp', '.gif', '.webp')):
                                    image_count += 1
                                    processed_count += 1
                                    self.update_log(f"üñºÔ∏è Resim'e logo ekleniyor: {os.path.basename(file_path)}")
                                    
                                    # Logo ekle
                                    result_path = self.video_processor.add_logo_to_image(file_path, logo_path, output_dir)
                                    
                                    if result_path and os.path.exists(result_path):
                                        # Orijinal dosyayƒ± sil ve i≈ülenmi≈ü dosyayƒ± yeniden adlandƒ±r
                                        os.remove(file_path)
                                        os.rename(result_path, file_path)
                                        self.update_log(f"‚úÖ Resim'e logo ba≈üarƒ±yla eklendi: {os.path.basename(file_path)}")
                                    else:
                                        self.update_log(f"‚ùå Resim logo ekleme ba≈üarƒ±sƒ±z: {os.path.basename(file_path)}")
                                    
                            except Exception as logo_error:
                                self.update_log(f"‚ùå Logo ekleme hatasƒ± ({os.path.basename(file_path)}): {str(logo_error)}")
                        
                        if processed_count == 0:
                            self.update_log(f"‚ÑπÔ∏è Logo eklenebilecek dosya bulunamadƒ± (video/resim)")
                        else:
                            self.update_log(f"üé® Logo ekleme tamamlandƒ±:")
                            if video_count > 0:
                                self.update_log(f"   üìπ {video_count} video dosyasƒ±na logo eklendi")
                            if image_count > 0:
                                self.update_log(f"   üñºÔ∏è {image_count} resim dosyasƒ±na logo eklendi")
                    else:
                        self.update_log(f"‚ùå Logo dosyasƒ± bulunamadƒ±: {logo_path}")
                
                # ƒ∞ndirilen dosyalarƒ± listele
                self.update_log(f"üìã ƒ∞ndirilen dosyalar:")
                for i, file_path in enumerate(downloaded_files, 1):
                    file_name = os.path.basename(file_path)
                    file_size = os.path.getsize(file_path) / (1024 * 1024)  # MB
                    self.update_log(f"  {i}. {file_name} ({file_size:.2f} MB)")
                
                self.update_log(f"‚úÖ ƒ∞ndirme tamamlandƒ±! Toplam {len(downloaded_files)} dosya")
                self.update_log(f"üìÅ Dosya konumu: {output_dir}")
                self.download_finished(True)
            else:
                self.update_log("‚ùå Hi√ßbir dosya indirilemedi")
                self.update_log("üí° Olasƒ± nedenler:")
                self.update_log("   ‚Ä¢ Pin URL'si ge√ßersiz veya eri≈üilemiyor")
                self.update_log("   ‚Ä¢ Pin silinmi≈ü olabilir")
                self.update_log("   ‚Ä¢ Pinterest eri≈üim kƒ±sƒ±tlamasƒ±")
                self.update_log("   ‚Ä¢ ƒ∞nternet baƒülantƒ±sƒ± sorunu")
                self.download_finished(False)
            
        except Exception as e:
            self.update_log(f"‚ùå ƒ∞ndirme hatasƒ±: {str(e)}")
            self.update_log(f"üîß Hata detayƒ±: {type(e).__name__}")
            self.download_finished(False)
    
    def stop_download(self, e):
        """ƒ∞ndirmeyi durdur"""
        if self.is_downloading:
            self.is_downloading = False
            self.update_log("‚èπÔ∏è ƒ∞ndirme kullanƒ±cƒ± tarafƒ±ndan durduruldu")
            self.update_log("üîÑ ƒ∞≈ülem iptal ediliyor...")
            self.status_text.value = "ƒ∞ndirme durduruluyor..."
            self.status_text.color = ft.Colors.ORANGE
            if self.page:
                self.page.update()
            self.download_finished(False)
        else:
            self.update_log("‚ÑπÔ∏è ≈ûu anda aktif bir indirme i≈ülemi yok")
    
    def download_finished(self, success):
        """ƒ∞ndirme tamamlandƒ±ƒüƒ±nda"""
        self.is_downloading = False
        self.progress_bar.visible = False
        
        if success:
            self.status_text.value = "‚úÖ ƒ∞ndirme ba≈üarƒ±yla tamamlandƒ±"
            self.status_text.color = ft.Colors.GREEN
            self.update_log("="*50)
            self.update_log("üéâ ƒ∞≈ülem ba≈üarƒ±yla tamamlandƒ±!")
        else:
            self.status_text.value = "‚ùå ƒ∞ndirme ba≈üarƒ±sƒ±z oldu"
            self.status_text.color = ft.Colors.RED
            self.update_log("="*50)
            self.update_log("üíî ƒ∞≈ülem ba≈üarƒ±sƒ±z oldu")
        
        if self.page:
            self.page.update()
    

    
    def close_window(self, page):
        """Pencereyi kapat"""
        try:
            if self.pinterest_downloader:
                self.pinterest_downloader.close()
            page.window_destroy()
        except:
            pass

if __name__ == "__main__":
    app = PinterestSingleDownloaderApp()
    ft.app(target=app.main)